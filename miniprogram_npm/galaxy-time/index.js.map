{"version":3,"sources":["index.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["\nlet moment = require(\"moment\");\n\n// shortcuts for easier to read formulas\n\nvar PI = Math.PI,\n    sin = Math.sin,\n    cos = Math.cos,\n    tan = Math.tan,\n    asin = Math.asin,\n    atan = Math.atan2,\n    acos = Math.acos,\n    rad = PI / 180;\n\n// sun calculations are based on http://aa.quae.nl/en/reken/zonpositie.html formulas\n\n\n// date/time constants and conversions\n\nvar dayMs = 1000 * 60 * 60 * 24,\n    J1970 = 2440588,\n    J2000 = 2451545;\n\nfunction toJulian(date) {\n    return date.valueOf() / dayMs - 0.5 + J1970;\n}\n\nfunction fromJulian(j) {\n    return new Date((j + 0.5 - J1970) * dayMs);\n}\n\nfunction toDays(date) {\n    return toJulian(date) - J2000;\n}\n\n\n// general calculations for position\n\nvar e = rad * 23.4397; // obliquity of the Earth\n\nfunction rightAscension(l, b) {\n    return atan(sin(l) * cos(e) - tan(b) * sin(e), cos(l));\n}\n\nfunction declination(l, b) {\n    return asin(sin(b) * cos(e) + cos(b) * sin(e) * sin(l));\n}\n\nfunction azimuth(H, phi, dec) {\n    return atan(sin(H), cos(H) * sin(phi) - tan(dec) * cos(phi));\n}\n\nfunction altitude(H, phi, dec) {\n    return asin(sin(phi) * sin(dec) + cos(phi) * cos(dec) * cos(H));\n}\n\nfunction siderealTime(d, lw) {\n    return rad * (280.16 + 360.9856235 * d) - lw;\n}\n\nfunction astroRefraction(h) {\n    if (h < 0) // the following formula works for positive altitudes only.\n        h = 0; // if h = -0.08901179 a div/0 would occur.\n\n    // formula 16.4 of \"Astronomical Algorithms\" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.\n    // 1.02 / tan(h + 10.26 / (h + 5.10)) h in degrees, result in arc minutes -> converted to rad:\n    return 0.0002967 / Math.tan(h + 0.00312536 / (h + 0.08901179));\n}\n\n// general sun calculations\n\nfunction solarMeanAnomaly(d) {\n    return rad * (357.5291 + 0.98560028 * d);\n}\n\nfunction eclipticLongitude(M) {\n\n    var C = rad * (1.9148 * sin(M) + 0.02 * sin(2 * M) + 0.0003 * sin(3 * M)), // equation of center\n        P = rad * 102.9372; // perihelion of the Earth\n\n    return M + C + P + PI;\n}\n\nfunction sunCoords(d) {\n\n    var M = solarMeanAnomaly(d),\n        L = eclipticLongitude(M);\n\n    return {\n        dec: declination(L, 0),\n        ra: rightAscension(L, 0)\n    };\n}\n\n// 交集\nfunction isIntersect(arr1, arr2) {\n    let start = [Math.min(...arr1), Math.min(...arr2)];//区间的两个最小值\n    let end = [Math.max(...arr1), Math.max(...arr2)];//区间的两个最大值\n    return {isShow: Math.max(...start) <= Math.min(...end), time: [Math.max(...start), Math.min(...end)]};//最大值里的最小值\n                                                                                                          // 是否\n                                                                                                          // 小于等于\n                                                                                                          // 最大值的最小值\n}\n\n// utf时间转换\nfunction timeMap(info) {\n    if (Array.isArray(info)) {\n        info = info.map(v => ({date: moment(v).format(\"YYYY-MM-DD HH:mm:ss\"), unix: moment(v).valueOf()}))\n    } else {\n        for (let key in info) {\n            let time = moment(info[key])\n            info[key] = {date: time.format(\"YYYY-MM-DD HH:mm:ss\"), unix: time.valueOf()}\n        }\n    }\n    return info\n}\n\n\nvar SunCalc = {};\n\n\n//查询最佳银河观测时间\nSunCalc.getTrueGalaxyTimes = (date = new Date(), lat, lng) => {\n    if (!lat || !lng) return {};\n    const dateFormat = 'YYYY-MM-DD';\n    let now = moment(date).format(dateFormat), now1 = moment(date).add(1, 'd').format(dateFormat);\n    // 目的地经纬度坐标度数\n    var allTime = SunCalc.getTimes(new Date(now), lat, lng);\n    var allTimeT = SunCalc.getTimes(new Date(now1), lat, lng);\n    //  rise：银河升起 mid：银河90°时间  set：银河降落\n    let galaxyTime = SunCalc.getGalaxyTimes(new Date(now), lat, lng);\n    let galaxyTimeT = SunCalc.getGalaxyTimes(new Date(now1), lat, lng);\n    //  rise:月亮升起 set:月亮落下\n    let moonTime = SunCalc.getMoonTimes(new Date(now), lat, lng);\n    let moonTimeT = SunCalc.getMoonTimes(new Date(now1), lat, lng);\n    // 黑夜开始\n    let {night} = allTime;\n    // 黑夜结束\n    let {nightEnd} = allTimeT;\n    // 隔天月落\n    let {rise: moonRiseT, set: moonSetT} = moonTimeT;\n    // 当天月落\n    let {rise: moonRise = moonRiseT, set: moonSet = moonSetT} = moonTime;\n    // 当前银河\n    let {rise: galaxyRise, set: galaxySet} = galaxyTime;\n    // 隔天银河\n    let {rise: galaxyRiseT, set: galaxySetT} = galaxyTimeT;\n\n    // console.log(\"夜晚开始：\", night.date, \"夜晚结束：\", nightEnd.date)\n    // console.log(\"月升：\", moonRise.date, \"隔天月升：\", moonRiseT ? moonRiseT.date : moonRise.date)\n    // console.log(\"月落：\", moonSet.date, \"隔天月落：\", moonSetT.date)\n    // console.log(\"银河升：\", galaxyRise.date, \"隔天银河升：\", galaxyRiseT.date)\n    // console.log(\"银河落：\", galaxySet.date, \"隔天银河落：\", galaxySetT.date)\n\n    let start = galaxyRise, end = galaxySet, moonStart = moonRise, moonEnd = moonSet;\n    // 获取正确月落时间\n    // 如果当天月出小于当天月落 说明月落再第二天\n    if (moonRise.unix > moonSet.unix) {\n        moonEnd = moonSetT\n    } else if (nightEnd.unix >= moonRiseT.unix) {\n        moonStart = moonRiseT\n        moonEnd = moonSetT\n    }\n    // 获取正确银河落时间\n    // 如果当前银河出大于当日银河落  说明银河落再第二天\n    if (galaxyRise.unix > galaxySet.unix) {\n        end = galaxySetT\n    } else if (nightEnd.unix >= galaxyRiseT.unix) {\n        start = galaxyRiseT\n        end = galaxySetT\n    }\n    //console.log(\"银河开始结束时间：\", start.date, end.date)\n    //console.log(\"夜晚开始结束时间：\", night.date, nightEnd.date,)\n\n    // 银河出现时间是否于黑夜重合\n    let {isShow, time} = isIntersect([night.unix, nightEnd.unix], [start.unix, end.unix]);\n\n    let timeSE = {code: 1};\n    // 今夜是否出现银河\n    if (isShow) {\n        // 获得夜晚可见时间段\n        let [start, end] = timeMap(time);\n        if (start.unix <= moonStart.unix && moonStart.unix <= end.unix) {\n            timeSE[\"start\"] = start;\n            timeSE[\"end\"] = moonStart;\n            // console.log(\"适宜观测1\", `时间段：${start.date}~${moonStart.date}`);\n        } else if (start.unix >= moonEnd.unix) {\n            timeSE[\"start\"] = start;\n            timeSE[\"end\"] = end;\n            // console.log(\"适宜观测2\", `时间段：${start.date}~${end.date}`);\n        } else if (end.unix <= moonStart.unix) {\n            timeSE[\"start\"] = start;\n            timeSE[\"end\"] = end;\n            // console.log(\"适宜观测4\", `时间段：${start.date}~${moonStart.date}`);\n        } else if (start.unix <= moonEnd.unix && moonEnd.unix <= end.unix) {\n            timeSE[\"start\"] = moonEnd;\n            timeSE[\"end\"] = end;\n            // console.log(\"适宜观测3\", `时间段：${moonEnd.date}~${end.date}`);\n        } else {\n            // console.log(\"不适宜观测1\")\n            timeSE[\"code\"] = 0;\n        }\n    } else {\n        // console.log(\"不适宜观测2\")\n        timeSE[\"code\"] = 0;\n    }\n    if (timeSE.code == 1) {\n        var a = moment(timeSE.start.date);\n        var b = moment(timeSE.end.date);\n        timeSE[\"hours\"] = (b.diff(a, 'hours', true)).toFixed(2);\n    }\n    return timeSE\n}\n\n// calculates sun position for a given date and latitude/longitude\n\nSunCalc.getPosition = function (date, lat, lng) {\n\n    var lw = rad * -lng,\n        phi = rad * lat,\n        d = toDays(date),\n\n        c = sunCoords(d),\n        H = siderealTime(d, lw) - c.ra;\n\n    return {\n        azimuth: azimuth(H, phi, c.dec),\n        altitude: altitude(H, phi, c.dec)\n    };\n};\n\n\n// sun times configuration (angle, morning name, evening name)\n\nvar times = SunCalc.times = [\n    [-0.833, 'sunrise', 'sunset'],\n    [-0.3, 'sunriseEnd', 'sunsetStart'],\n    [-6, 'dawn', 'dusk'],\n    [-12, 'nauticalDawn', 'nauticalDusk'],\n    [-18, 'nightEnd', 'night'],\n    [6, 'goldenHourEnd', 'goldenHour']\n];\n\n// adds a custom time to the times config\n\nSunCalc.addTime = function (angle, riseName, setName) {\n    times.push([angle, riseName, setName]);\n};\n\n\n// calculations for sun times\n\nvar J0 = 0.0009;\n\nfunction julianCycle(d, lw) {\n    return Math.round(d - J0 - lw / (2 * PI));\n}\n\nfunction approxTransit(Ht, lw, n) {\n    return J0 + (Ht + lw) / (2 * PI) + n;\n}\n\nfunction solarTransitJ(ds, M, L) {\n    return J2000 + ds + 0.0053 * sin(M) - 0.0069 * sin(2 * L);\n}\n\nfunction hourAngle(h, phi, d) {\n    return acos((sin(h) - sin(phi) * sin(d)) / (cos(phi) * cos(d)));\n}\n\n// returns set time for the given sun altitude\nfunction getSetJ(h, lw, phi, dec, n, M, L) {\n\n    var w = hourAngle(h, phi, dec),\n        a = approxTransit(w, lw, n);\n    return solarTransitJ(a, M, L);\n}\n\n\n// calculates sun times for a given date and latitude/longitude\n\nSunCalc.getTimes = function (date, lat, lng) {\n\n    var lw = rad * -lng,\n        phi = rad * lat,\n\n        d = toDays(date),\n        n = julianCycle(d, lw),\n        ds = approxTransit(0, lw, n),\n\n        M = solarMeanAnomaly(ds),\n        L = eclipticLongitude(M),\n        dec = declination(L, 0),\n\n        Jnoon = solarTransitJ(ds, M, L),\n\n        i, len, time, Jset, Jrise;\n\n\n    var result = {\n        solarNoon: fromJulian(Jnoon),\n        nadir: fromJulian(Jnoon - 0.5)\n    };\n\n    for (i = 0, len = times.length; i < len; i += 1) {\n        time = times[i];\n\n        Jset = getSetJ(time[0] * rad, lw, phi, dec, n, M, L);\n        Jrise = Jnoon - (Jset - Jnoon);\n\n        result[time[1]] = fromJulian(Jrise);\n        result[time[2]] = fromJulian(Jset);\n    }\n\n    return timeMap(result);\n};\n\n\n// moon calculations, based on http://aa.quae.nl/en/reken/hemelpositie.html formulas\n\nfunction moonCoords(d) { // geocentric ecliptic coordinates of the moon\n\n    var L = rad * (218.316 + 13.176396 * d), // ecliptic longitude\n        M = rad * (134.963 + 13.064993 * d), // mean anomaly\n        F = rad * (93.272 + 13.229350 * d),  // mean distance\n\n        l = L + rad * 6.289 * sin(M), // longitude\n        b = rad * 5.128 * sin(F),     // latitude\n        dt = 385001 - 20905 * cos(M);  // distance to the moon in km\n\n    return {\n        ra: rightAscension(l, b),\n        dec: declination(l, b),\n        dist: dt\n    };\n}\n\nSunCalc.getMoonPosition = function (date, lat, lng) {\n\n    var lw = rad * -lng,\n        phi = rad * lat,\n        d = toDays(date),\n\n        c = moonCoords(d),\n        H = siderealTime(d, lw) - c.ra,\n        h = altitude(H, phi, c.dec),\n        // formula 14.1 of \"Astronomical Algorithms\" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.\n        pa = atan(sin(H), tan(phi) * cos(c.dec) - sin(c.dec) * cos(H));\n\n    h = h + astroRefraction(h); // altitude correction for refraction\n\n    return {\n        azimuth: azimuth(H, phi, c.dec),\n        altitude: h,\n        distance: c.dist,\n        parallacticAngle: pa\n    };\n};\n\n\n// calculations for illumination parameters of the moon,\n// based on http://idlastro.gsfc.nasa.gov/ftp/pro/astro/mphase.pro formulas and\n// Chapter 48 of \"Astronomical Algorithms\" 2nd edition by Jean Meeus (Willmann-Bell, Richmond) 1998.\n\nSunCalc.getMoonIllumination = function (date) {\n\n    var d = toDays(date),\n        s = sunCoords(d),\n        m = moonCoords(d),\n\n        sdist = 149598000, // distance from Earth to Sun in km\n\n        phi = acos(sin(s.dec) * sin(m.dec) + cos(s.dec) * cos(m.dec) * cos(s.ra - m.ra)),\n        inc = atan(sdist * sin(phi), m.dist - sdist * cos(phi)),\n        angle = atan(cos(s.dec) * sin(s.ra - m.ra), sin(s.dec) * cos(m.dec) -\n            cos(s.dec) * sin(m.dec) * cos(s.ra - m.ra));\n\n    return {\n        fraction: (1 + cos(inc)) / 2,\n        phase: 0.5 + 0.5 * inc * (angle < 0 ? -1 : 1) / Math.PI,\n        angle: angle\n    };\n};\n\n\nfunction hoursLater(date, h) {\n    return new Date(date.valueOf() + h * dayMs / 24);\n}\n\n// calculations for moon rise/set times are based on http://www.stargazing.net/kepler/moonrise.html article\n\nSunCalc.getMoonTimes = function (date, lat, lng, inUTC) {\n    var t = new Date(date);\n    if (inUTC) t.setUTCHours(0, 0, 0, 0);\n    else t.setHours(0, 0, 0, 0);\n\n    var hc = 0.133 * rad,\n        h0 = SunCalc.getMoonPosition(t, lat, lng).altitude - hc,\n        h1, h2, rise, set, a, b, xe, ye, d, roots, x1, x2, dx;\n\n    // go in 2-hour chunks, each time seeing if a 3-point quadratic curve crosses zero (which means rise or set)\n    for (var i = 1; i <= 24; i += 2) {\n        h1 = SunCalc.getMoonPosition(hoursLater(t, i), lat, lng).altitude - hc;\n        h2 = SunCalc.getMoonPosition(hoursLater(t, i + 1), lat, lng).altitude - hc;\n\n        a = (h0 + h2) / 2 - h1;\n        b = (h2 - h0) / 2;\n        xe = -b / (2 * a);\n        ye = (a * xe + b) * xe + h1;\n        d = b * b - 4 * a * h1;\n        roots = 0;\n\n        if (d >= 0) {\n            dx = Math.sqrt(d) / (Math.abs(a) * 2);\n            x1 = xe - dx;\n            x2 = xe + dx;\n            if (Math.abs(x1) <= 1) roots++;\n            if (Math.abs(x2) <= 1) roots++;\n            if (x1 < -1) x1 = x2;\n        }\n\n        if (roots === 1) {\n            if (h0 < 0) rise = i + x1;\n            else set = i + x1;\n\n        } else if (roots === 2) {\n            rise = i + (ye < 0 ? x2 : x1);\n            set = i + (ye < 0 ? x1 : x2);\n        }\n\n        if (rise && set) break;\n\n        h0 = h2;\n    }\n\n    var result = {};\n\n    if (rise) result.rise = hoursLater(t, rise);\n    if (set) result.set = hoursLater(t, set);\n\n    if (!rise && !set) result[ye > 0 ? 'alwaysUp' : 'alwaysDown'] = true;\n\n    return timeMap(result);\n};\n\nSunCalc.getGalaxyPosition = function (date, lat, lng) {\n    var lw = rad * -lng,\n        phi = rad * lat,\n        d = toDays(date),\n\n        c = {dec: -28.9333333 * rad, ra: 266.5 * rad},\n        H = siderealTime(d, lw) - c.ra;\n    let h = altitude(H, phi, c.dec);\n    h = h + astroRefraction(h);\n    return {\n        azimuth: azimuth(H, phi, c.dec),\n        altitude: h\n    };\n};\n\nSunCalc.getGalaxyTimes = function (date, lat, lng, inUTC) {\n    var t = new Date(date);\n    if (inUTC) t.setUTCHours(0, 0, 0, 0);\n    else t.setHours(0, 0, 0, 0);\n\n    var hc = 0.133 * rad,\n        h0 = SunCalc.getGalaxyPosition(t, lat, lng).altitude - hc,\n        h1, h2, rise, set, a, b, xe, ye, d, roots, x1, x2, dx;\n\n    // go in 2-hour chunks, each time seeing if a 3-point quadratic curve crosses zero (which means rise or set)\n    for (var i = 1; i <= 24; i += 2) {\n        h1 = SunCalc.getGalaxyPosition(hoursLater(t, i), lat, lng).altitude - hc;\n        h2 = SunCalc.getGalaxyPosition(hoursLater(t, i + 1), lat, lng).altitude - hc;\n\n        a = (h0 + h2) / 2 - h1;\n        b = (h2 - h0) / 2;\n        xe = -b / (2 * a);\n        ye = (a * xe + b) * xe + h1;\n        d = b * b - 4 * a * h1;\n        roots = 0;\n\n        if (d >= 0) {\n            dx = Math.sqrt(d) / (Math.abs(a) * 2);\n            x1 = xe - dx;\n            x2 = xe + dx;\n            if (Math.abs(x1) <= 1) roots++;\n            if (Math.abs(x2) <= 1) roots++;\n            if (x1 < -1) x1 = x2;\n        }\n\n        if (roots === 1) {\n            if (h0 < 0) rise = i + x1;\n            else set = i + x1;\n\n        } else if (roots === 2) {\n            rise = i + (ye < 0 ? x2 : x1);\n            set = i + (ye < 0 ? x1 : x2);\n        }\n\n        if (rise && set) break;\n\n        h0 = h2;\n    }\n\n    var result = {};\n    if (rise && set) result.mid = hoursLater(t, (rise + set) / 2);\n    if (rise) result.rise = hoursLater(t, rise);\n    if (set) result.set = hoursLater(t, set);\n\n    if (!rise && !set) result[ye > 0 ? 'alwaysUp' : 'alwaysDown'] = true;\n\n    return timeMap(result);\n};\n\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = SunCalc;\n// module.exports = SunCalc;"]}